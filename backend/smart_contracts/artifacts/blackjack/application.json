{
    "hints": {
        "create(asset,account,account)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "opt_in(axfer,uint64)void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "init(pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute_req(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute_act(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hit_req(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hit_act(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stand_req(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stand_act(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "forfeit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete(asset,account,account)void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 14
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "action_timer": {
                    "type": "uint64",
                    "key": "action_timer",
                    "descr": ""
                },
                "asset": {
                    "type": "uint64",
                    "key": "asset",
                    "descr": ""
                },
                "bank": {
                    "type": "bytes",
                    "key": "bank",
                    "descr": ""
                },
                "bank_cards": {
                    "type": "uint64",
                    "key": "bank_cards",
                    "descr": ""
                },
                "bank_max_total": {
                    "type": "uint64",
                    "key": "bank_max_total",
                    "descr": ""
                },
                "bank_min_total": {
                    "type": "uint64",
                    "key": "bank_min_total",
                    "descr": ""
                },
                "cards": {
                    "type": "bytes",
                    "key": "cards",
                    "descr": ""
                },
                "cards_left": {
                    "type": "uint64",
                    "key": "cards_left",
                    "descr": ""
                },
                "fee_amount": {
                    "type": "uint64",
                    "key": "fee_amount",
                    "descr": ""
                },
                "fee_holder": {
                    "type": "bytes",
                    "key": "fee_holder",
                    "descr": ""
                },
                "last_card": {
                    "type": "uint64",
                    "key": "last_card",
                    "descr": ""
                },
                "nonce": {
                    "type": "uint64",
                    "key": "nonce",
                    "descr": ""
                },
                "player_cards": {
                    "type": "uint64",
                    "key": "player_cards",
                    "descr": ""
                },
                "player_max_total": {
                    "type": "uint64",
                    "key": "player_max_total",
                    "descr": ""
                },
                "player_min_total": {
                    "type": "uint64",
                    "key": "player_min_total",
                    "descr": ""
                },
                "request": {
                    "type": "bytes",
                    "key": "request",
                    "descr": ""
                },
                "stake": {
                    "type": "uint64",
                    "key": "stake",
                    "descr": ""
                },
                "state": {
                    "type": "uint64",
                    "key": "state",
                    "descr": ""
                },
                "winner": {
                    "type": "bytes",
                    "key": "winner",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "blackjack",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "bank"
                    },
                    {
                        "type": "account",
                        "name": "fee_holder"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_in",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "init",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "distribute_req",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "request"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the player to randomly choose a card to distribute in the initial phase.\nrequest: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"
            },
            {
                "name": "distribute_act",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "sig"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "hit_req",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "request"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the player to randomly choose a card to draw.\nrequest: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"
            },
            {
                "name": "hit_act",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "sig"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the bank to specify what card will be drawn by the player.\nsig: signature of appState.request by appState.bank"
            },
            {
                "name": "stand_req",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "request"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the player to randomly choose a card to let the bank draw.\nrequest: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"
            },
            {
                "name": "stand_act",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "sig"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the bank to specify what card will be drawn by the bank.\nsig: signature of appState.request by appState.bank"
            },
            {
                "name": "forfeit",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by either the bank or the player if the other stops interacting."
            },
            {
                "name": "delete",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "other"
                    },
                    {
                        "type": "account",
                        "name": "fee_holder"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Routes the finish, cancel and push methods\ncreator: reference to opponent's address, if existing (used to enable InnerTxn) fee_holder: reference to appState.fee_holder (used to enable InnerTxn) asset: reference to appState.asset (used to enable InnerTxn)"
            },
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}