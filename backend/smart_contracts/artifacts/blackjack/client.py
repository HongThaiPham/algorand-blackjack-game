# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create(asset,account,account)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "opt_in(axfer,uint64)void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "init(pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute_req(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distribute_act(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hit_req(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hit_act(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stand_req(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stand_act(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "forfeit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete(asset,account,account)void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 14
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "action_timer": {
                    "type": "uint64",
                    "key": "action_timer",
                    "descr": ""
                },
                "asset": {
                    "type": "uint64",
                    "key": "asset",
                    "descr": ""
                },
                "bank": {
                    "type": "bytes",
                    "key": "bank",
                    "descr": ""
                },
                "bank_cards": {
                    "type": "uint64",
                    "key": "bank_cards",
                    "descr": ""
                },
                "bank_max_total": {
                    "type": "uint64",
                    "key": "bank_max_total",
                    "descr": ""
                },
                "bank_min_total": {
                    "type": "uint64",
                    "key": "bank_min_total",
                    "descr": ""
                },
                "cards": {
                    "type": "bytes",
                    "key": "cards",
                    "descr": ""
                },
                "cards_left": {
                    "type": "uint64",
                    "key": "cards_left",
                    "descr": ""
                },
                "fee_amount": {
                    "type": "uint64",
                    "key": "fee_amount",
                    "descr": ""
                },
                "fee_holder": {
                    "type": "bytes",
                    "key": "fee_holder",
                    "descr": ""
                },
                "last_card": {
                    "type": "uint64",
                    "key": "last_card",
                    "descr": ""
                },
                "nonce": {
                    "type": "uint64",
                    "key": "nonce",
                    "descr": ""
                },
                "player_cards": {
                    "type": "uint64",
                    "key": "player_cards",
                    "descr": ""
                },
                "player_max_total": {
                    "type": "uint64",
                    "key": "player_max_total",
                    "descr": ""
                },
                "player_min_total": {
                    "type": "uint64",
                    "key": "player_min_total",
                    "descr": ""
                },
                "request": {
                    "type": "bytes",
                    "key": "request",
                    "descr": ""
                },
                "stake": {
                    "type": "uint64",
                    "key": "stake",
                    "descr": ""
                },
                "state": {
                    "type": "uint64",
                    "key": "state",
                    "descr": ""
                },
                "winner": {
                    "type": "bytes",
                    "key": "winner",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "blackjack",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "bank"
                    },
                    {
                        "type": "account",
                        "name": "fee_holder"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_in",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "init",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "distribute_req",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "request"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the player to randomly choose a card to distribute in the initial phase.\nrequest: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"
            },
            {
                "name": "distribute_act",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "sig"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "hit_req",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "request"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the player to randomly choose a card to draw.\nrequest: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"
            },
            {
                "name": "hit_act",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "sig"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the bank to specify what card will be drawn by the player.\nsig: signature of appState.request by appState.bank"
            },
            {
                "name": "stand_req",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "request"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the player to randomly choose a card to let the bank draw.\nrequest: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"
            },
            {
                "name": "stand_act",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "sig"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by the bank to specify what card will be drawn by the bank.\nsig: signature of appState.request by appState.bank"
            },
            {
                "name": "forfeit",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Callable by either the bank or the player if the other stops interacting."
            },
            {
                "name": "delete",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "other"
                    },
                    {
                        "type": "account",
                        "name": "fee_holder"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Routes the finish, cancel and push methods\ncreator: reference to opponent's address, if existing (used to enable InnerTxn) fee_holder: reference to appState.fee_holder (used to enable InnerTxn) asset: reference to appState.asset (used to enable InnerTxn)"
            },
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class InitArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    asset: int

    @staticmethod
    def method() -> str:
        return "init(pay,asset)void"


@dataclasses.dataclass(kw_only=True)
class DistributeReqArgs(_ArgsBase[None]):
    """Callable by the player to randomly choose a card to distribute in the initial phase.
    request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"""

    request: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "distribute_req(byte[])void"


@dataclasses.dataclass(kw_only=True)
class DistributeActArgs(_ArgsBase[None]):
    sig: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "distribute_act(byte[])void"


@dataclasses.dataclass(kw_only=True)
class HitReqArgs(_ArgsBase[None]):
    """Callable by the player to randomly choose a card to draw.
    request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"""

    request: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "hit_req(byte[])void"


@dataclasses.dataclass(kw_only=True)
class HitActArgs(_ArgsBase[None]):
    """Callable by the bank to specify what card will be drawn by the player.
    sig: signature of appState.request by appState.bank"""

    sig: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "hit_act(byte[])void"


@dataclasses.dataclass(kw_only=True)
class StandReqArgs(_ArgsBase[None]):
    """Callable by the player to randomly choose a card to let the bank draw.
    request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`"""

    request: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "stand_req(byte[])void"


@dataclasses.dataclass(kw_only=True)
class StandActArgs(_ArgsBase[None]):
    """Callable by the bank to specify what card will be drawn by the bank.
    sig: signature of appState.request by appState.bank"""

    sig: bytes | bytearray

    @staticmethod
    def method() -> str:
        return "stand_act(byte[])void"


@dataclasses.dataclass(kw_only=True)
class ForfeitArgs(_ArgsBase[None]):
    """Callable by either the bank or the player if the other stops interacting."""

    @staticmethod
    def method() -> str:
        return "forfeit()void"


@dataclasses.dataclass(kw_only=True)
class HelloArgs(_ArgsBase[str]):
    name: str

    @staticmethod
    def method() -> str:
        return "hello(string)string"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[None]):
    asset: int
    bank: str | bytes
    fee_holder: str | bytes

    @staticmethod
    def method() -> str:
        return "create(asset,account,account)void"


@dataclasses.dataclass(kw_only=True)
class DeleteArgs(_ArgsBase[None]):
    """Routes the finish, cancel and push methods
    creator: reference to opponent's address, if existing (used to enable InnerTxn) fee_holder: reference to appState.fee_holder (used to enable InnerTxn) asset: reference to appState.asset (used to enable InnerTxn)"""

    asset: int
    other: str | bytes
    fee_holder: str | bytes

    @staticmethod
    def method() -> str:
        return "delete(asset,account,account)void"


@dataclasses.dataclass(kw_only=True)
class OptInArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    fee_amount: int

    @staticmethod
    def method() -> str:
        return "opt_in(axfer,uint64)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.action_timer = typing.cast(int, data.get(b"action_timer"))
        self.asset = typing.cast(int, data.get(b"asset"))
        self.bank = ByteReader(typing.cast(bytes, data.get(b"bank")))
        self.bank_cards = typing.cast(int, data.get(b"bank_cards"))
        self.bank_max_total = typing.cast(int, data.get(b"bank_max_total"))
        self.bank_min_total = typing.cast(int, data.get(b"bank_min_total"))
        self.cards = ByteReader(typing.cast(bytes, data.get(b"cards")))
        self.cards_left = typing.cast(int, data.get(b"cards_left"))
        self.fee_amount = typing.cast(int, data.get(b"fee_amount"))
        self.fee_holder = ByteReader(typing.cast(bytes, data.get(b"fee_holder")))
        self.last_card = typing.cast(int, data.get(b"last_card"))
        self.nonce = typing.cast(int, data.get(b"nonce"))
        self.player_cards = typing.cast(int, data.get(b"player_cards"))
        self.player_max_total = typing.cast(int, data.get(b"player_max_total"))
        self.player_min_total = typing.cast(int, data.get(b"player_min_total"))
        self.request = ByteReader(typing.cast(bytes, data.get(b"request")))
        self.stake = typing.cast(int, data.get(b"stake"))
        self.state = typing.cast(int, data.get(b"state"))
        self.winner = ByteReader(typing.cast(bytes, data.get(b"winner")))


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def init(
        self,
        *,
        txn: TransactionWithSigner,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `init(pay,asset)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = InitArgs(
            txn=txn,
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def distribute_req(
        self,
        *,
        request: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Callable by the player to randomly choose a card to distribute in the initial phase.
        request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`
        
        Adds a call to `distribute_req(byte[])void` ABI method
        
        :param bytes | bytearray request: The `request` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DistributeReqArgs(
            request=request,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def distribute_act(
        self,
        *,
        sig: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `distribute_act(byte[])void` ABI method
        
        :param bytes | bytearray sig: The `sig` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DistributeActArgs(
            sig=sig,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def hit_req(
        self,
        *,
        request: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Callable by the player to randomly choose a card to draw.
        request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`
        
        Adds a call to `hit_req(byte[])void` ABI method
        
        :param bytes | bytearray request: The `request` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HitReqArgs(
            request=request,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def hit_act(
        self,
        *,
        sig: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Callable by the bank to specify what card will be drawn by the player.
        sig: signature of appState.request by appState.bank
        
        Adds a call to `hit_act(byte[])void` ABI method
        
        :param bytes | bytearray sig: The `sig` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HitActArgs(
            sig=sig,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def stand_req(
        self,
        *,
        request: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Callable by the player to randomly choose a card to let the bank draw.
        request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`
        
        Adds a call to `stand_req(byte[])void` ABI method
        
        :param bytes | bytearray request: The `request` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = StandReqArgs(
            request=request,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def stand_act(
        self,
        *,
        sig: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Callable by the bank to specify what card will be drawn by the bank.
        sig: signature of appState.request by appState.bank
        
        Adds a call to `stand_act(byte[])void` ABI method
        
        :param bytes | bytearray sig: The `sig` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = StandActArgs(
            sig=sig,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def forfeit(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Callable by either the bank or the player if the other stops interacting.
        
        Adds a call to `forfeit()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ForfeitArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HelloArgs(
            name=name,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        asset: int,
        bank: str | bytes,
        fee_holder: str | bytes,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create(asset,account,account)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param str | bytes bank: The `bank` ABI parameter
        :param str | bytes fee_holder: The `fee_holder` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs(
            asset=asset,
            bank=bank,
            fee_holder=fee_holder,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_delete(
        self,
        *,
        asset: int,
        other: str | bytes,
        fee_holder: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Routes the finish, cancel and push methods
        creator: reference to opponent's address, if existing (used to enable InnerTxn) fee_holder: reference to appState.fee_holder (used to enable InnerTxn) asset: reference to appState.asset (used to enable InnerTxn)
        
        Adds a call to `delete(asset,account,account)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param str | bytes other: The `other` ABI parameter
        :param str | bytes fee_holder: The `fee_holder` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteArgs(
            asset=asset,
            other=other,
            fee_holder=fee_holder,
        )
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def opt_in_opt_in(
        self,
        *,
        txn: TransactionWithSigner,
        fee_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `opt_in(axfer,uint64)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int fee_amount: The `fee_amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OptInArgs(
            txn=txn,
            fee_amount=fee_amount,
        )
        self.app_client.compose_opt_in(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class BlackjackClient:
    """A class for interacting with the blackjack app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        BlackjackClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def init(
        self,
        *,
        txn: TransactionWithSigner,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `init(pay,asset)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = InitArgs(
            txn=txn,
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def distribute_req(
        self,
        *,
        request: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Callable by the player to randomly choose a card to distribute in the initial phase.
        request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`
        
        Calls `distribute_req(byte[])void` ABI method
        
        :param bytes | bytearray request: The `request` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DistributeReqArgs(
            request=request,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def distribute_act(
        self,
        *,
        sig: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `distribute_act(byte[])void` ABI method
        
        :param bytes | bytearray sig: The `sig` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DistributeActArgs(
            sig=sig,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def hit_req(
        self,
        *,
        request: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Callable by the player to randomly choose a card to draw.
        request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`
        
        Calls `hit_req(byte[])void` ABI method
        
        :param bytes | bytearray request: The `request` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = HitReqArgs(
            request=request,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def hit_act(
        self,
        *,
        sig: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Callable by the bank to specify what card will be drawn by the player.
        sig: signature of appState.request by appState.bank
        
        Calls `hit_act(byte[])void` ABI method
        
        :param bytes | bytearray sig: The `sig` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = HitActArgs(
            sig=sig,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def stand_req(
        self,
        *,
        request: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Callable by the player to randomly choose a card to let the bank draw.
        request: JSON containing a (`nonce` = appState.nonce), a (`app` = Global.current_application_id()) and a random `nonce_p`
        
        Calls `stand_req(byte[])void` ABI method
        
        :param bytes | bytearray request: The `request` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = StandReqArgs(
            request=request,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def stand_act(
        self,
        *,
        sig: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Callable by the bank to specify what card will be drawn by the bank.
        sig: signature of appState.request by appState.bank
        
        Calls `stand_act(byte[])void` ABI method
        
        :param bytes | bytearray sig: The `sig` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = StandActArgs(
            sig=sig,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def forfeit(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Callable by either the bank or the player if the other stops interacting.
        
        Calls `forfeit()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ForfeitArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Calls `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = HelloArgs(
            name=name,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_create(
        self,
        *,
        asset: int,
        bank: str | bytes,
        fee_holder: str | bytes,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `create(asset,account,account)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param str | bytes bank: The `bank` ABI parameter
        :param str | bytes fee_holder: The `fee_holder` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateArgs(
            asset=asset,
            bank=bank,
            fee_holder=fee_holder,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_delete(
        self,
        *,
        asset: int,
        other: str | bytes,
        fee_holder: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Routes the finish, cancel and push methods
        creator: reference to opponent's address, if existing (used to enable InnerTxn) fee_holder: reference to appState.fee_holder (used to enable InnerTxn) asset: reference to appState.asset (used to enable InnerTxn)
        
        Calls `delete(asset,account,account)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param str | bytes other: The `other` ABI parameter
        :param str | bytes fee_holder: The `fee_holder` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DeleteArgs(
            asset=asset,
            other=other,
            fee_holder=fee_holder,
        )
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def opt_in_opt_in(
        self,
        *,
        txn: TransactionWithSigner,
        fee_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `opt_in(axfer,uint64)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int fee_amount: The `fee_amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = OptInArgs(
            txn=txn,
            fee_amount=fee_amount,
        )
        result = self.app_client.opt_in(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[DeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[DeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
